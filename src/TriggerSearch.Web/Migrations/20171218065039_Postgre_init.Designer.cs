// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TriggerSearch.Data;

namespace TriggerSearch.Web.Migrations
{
    [DbContext(typeof(PermissionContext))]
    [Migration("20171218065039_Postgre_init")]
    partial class Postgre_init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("TriggerSearch.Data.Models.Group", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreaterID");

                    b.Property<bool?>("IsDefault");

                    b.Property<bool?>("IsDeleted");

                    b.Property<DateTime?>("Modified");

                    b.Property<Guid?>("ModifierID");

                    b.Property<string>("Note");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.GroupRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreaterID");

                    b.Property<Guid>("GroupID");

                    b.Property<Guid>("RoleID");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("RoleID");

                    b.ToTable("GroupRoles");
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.GroupUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreaterID");

                    b.Property<Guid>("GroupID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.HasIndex("UserID");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.ObjectShareUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreaterID");

                    b.Property<Guid>("PermitID");

                    b.Property<Guid>("TypeObjectID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("PermitID");

                    b.HasIndex("TypeObjectID");

                    b.HasIndex("UserID");

                    b.ToTable("ObjectShareUsers");
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.Permit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreaterID");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("Title");

                    b.Property<Guid>("TypeObjectID");

                    b.HasKey("ID");

                    b.HasIndex("TypeObjectID");

                    b.ToTable("Permits");
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreaterID");

                    b.Property<bool?>("IsDefault");

                    b.Property<bool?>("IsDeleted");

                    b.Property<DateTime?>("Modified");

                    b.Property<Guid?>("ModifierID");

                    b.Property<string>("Note");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.RolePermit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreaterID");

                    b.Property<Guid>("PermitID");

                    b.Property<Guid>("RoleID");

                    b.HasKey("ID");

                    b.HasIndex("PermitID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePermits");
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.TypeObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreaterID");

                    b.Property<string>("Name");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("TypeObjects");
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarURL");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreaterID");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool?>("IsDefault");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsLock");

                    b.Property<DateTime?>("LastLogin");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("Modified");

                    b.Property<Guid?>("ModifierID");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreaterID");

                    b.Property<Guid>("RoleID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.GroupRole", b =>
                {
                    b.HasOne("TriggerSearch.Data.Models.Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TriggerSearch.Data.Models.Role")
                        .WithMany("GroupRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.GroupUser", b =>
                {
                    b.HasOne("TriggerSearch.Data.Models.Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TriggerSearch.Data.Models.User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.ObjectShareUser", b =>
                {
                    b.HasOne("TriggerSearch.Data.Models.Permit")
                        .WithMany("ObjectShareUsers")
                        .HasForeignKey("PermitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TriggerSearch.Data.Models.TypeObject")
                        .WithMany("ObjectShareUsers")
                        .HasForeignKey("TypeObjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TriggerSearch.Data.Models.User")
                        .WithMany("ObjectShareUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.Permit", b =>
                {
                    b.HasOne("TriggerSearch.Data.Models.TypeObject")
                        .WithMany("Permits")
                        .HasForeignKey("TypeObjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.RolePermit", b =>
                {
                    b.HasOne("TriggerSearch.Data.Models.Permit")
                        .WithMany("RolePermits")
                        .HasForeignKey("PermitID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TriggerSearch.Data.Models.Role")
                        .WithMany("RolePermits")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TriggerSearch.Data.Models.UserRole", b =>
                {
                    b.HasOne("TriggerSearch.Data.Models.Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TriggerSearch.Data.Models.User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
